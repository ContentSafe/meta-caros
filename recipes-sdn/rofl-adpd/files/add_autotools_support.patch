Index: git/Makefile.am
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ git/Makefile.am	2012-08-08 11:11:50.701706027 +0200
@@ -0,0 +1,11 @@
+#
+#
+#
+#
+ACLOCAL_AMFLAGS = -I m4
+
+sbin_PROGRAMS = adpd
+adpd_SOURCES = adpd.cc cdpath.cc cfwdengine.cc cpkbstore.cc cpqueue.cc
+adpd_CXXFLAGS = $(ORAN_FLAGS) \
+		  -I$(srcdir)/include
+adpd_LDADD = -lrofl -lrofcommon -lrofconfig
Index: git/configure.ac
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ git/configure.ac	2012-08-08 11:11:50.701706027 +0200
@@ -0,0 +1,69 @@
+#                                               -*- Autoconf -*-
+# Process this file with autoconf to produce a configure script.
+
+AC_PREREQ([2.68])
+AC_INIT([rofl],[0.1],[bugs@rofl.com])
+AC_CONFIG_SRCDIR([adpd.cc])
+AC_CONFIG_AUX_DIR(auxdir)
+AM_INIT_AUTOMAKE([foreign silent-rules subdir-objects -Wcross])
+AC_CONFIG_HEADERS([config.h])
+AC_CONFIG_MACRO_DIR([m4])
+
+dnl This mechanism allows one to enable debug compilations...
+AC_MSG_CHECKING([if debugging is wanted])
+AC_ARG_ENABLE([debug],
+  [AS_HELP_STRING([--disable-debug],
+                  [disable debugging])],
+  [], [ enable_debug=yes ])
+if test "$enable_debug" = "yes"; then
+   AC_MSG_RESULT(yes)
+   CXXFLAGS="$CXXFLAGS -DDEBUG"
+else
+   AC_MSG_RESULT(no)
+   CXXFLAGS="$CXXFLAGS -DNDEBUG"
+fi
+AM_CONDITIONAL(ENABLE_DEBUG, test "$enable_debug" = "yes")
+
+ORAN_FLAGS=-DORAN
+AC_SUBST([ORAN_FLAGS])
+
+# Checks for programs.
+AC_PROG_CXX
+CC=${CXX}
+AC_PROG_CXXCPP
+CPP=${CXXCPP}
+AC_PROG_CXX_C_O
+AC_PROG_INSTALL
+AC_PROG_MAKE_SET
+LT_INIT
+
+AC_CHECK_LIB([pthread], [pthread_mutex_init],, [AC_MSG_ERROR([pthread library missing])])
+AC_CHECK_LIB([rt], [clock_gettime])
+
+# Checks for header files.
+AC_CHECK_HEADERS([arpa/inet.h fcntl.h inttypes.h limits.h netinet/in.h stdint.h stdlib.h string.h strings.h sys/ioctl.h sys/socket.h sys/time.h syslog.h unistd.h])
+
+# Checks for typedefs, structures, and compiler characteristics.
+AC_HEADER_STDBOOL
+AC_C_INLINE
+AC_TYPE_PID_T
+AC_TYPE_SIZE_T
+AC_TYPE_UINT16_T
+AC_TYPE_UINT32_T
+AC_TYPE_UINT64_T
+AC_TYPE_UINT8_T
+
+# ROFL files
+# AC_CHECK_HEADERS([common/cmempool.h],, [AC_MSG_ERROR([ROFL library include file missing])])
+# AX_CXX_CHECK_LIB([rofcommon], [cmempool::init()],, [AC_MSG_ERROR([ROFL common library missing])])
+# AX_CXX_CHECK_LIB([rofconfig], [ccli::run_terminal],, [AC_MSG_ERROR([ROFL config library missing])])
+# AX_CXX_CHECK_LIB([rofl], [clinuxport::get_state],, [AC_MSG_ERROR([ROFL main library missing])])
+
+# Checks for library functions.
+AC_FUNC_FORK
+AC_FUNC_MMAP
+AC_FUNC_REALLOC
+AC_CHECK_FUNCS([bzero clock_gettime dup2 getpagesize memmove memset munmap select socket strerror strncasecmp])
+
+AC_CONFIG_FILES([Makefile])
+AC_OUTPUT
Index: git/m4/ax_cxx_check_lib.m4
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ git/m4/ax_cxx_check_lib.m4	2012-08-08 11:11:50.701706027 +0200
@@ -0,0 +1,110 @@
+dnl @synopsis AX_CXX_CHECK_LIB(libname, functioname, action-if, action-if-not)
+dnl
+dnl The standard AC_CHECK_LIB can not test functions in namespaces.
+dnl Therefore AC_CHECK_LIB(cgicc, cgicc::Cgicc::getVersion) will always
+dnl fail. We need to decompose the functionname into a series of namespaces
+dnl where it gets declared so that it can be used for a link test.
+dnl
+dnl In the first version I did allow namespace::functionname to be a
+dnl reference to a void-argument global functionname (just wrapped in a
+dnl namespace) like its C counterparts would be - but in reality such
+dnl thing does not exist. The only global / static functions are always
+dnl made const-functions which is an attribute mangled along into the
+dnl library function export name.
+dnl
+dnl The normal usage will ask for a test of a class-member function which
+dnl should be presented with a full function spec with arguments given in
+dnl parentheses following the function name - if the function to test for
+dnl does expect arguments then you should add default initial values in the
+dnl prototype (even if they do not exist originally, these are used only
+dnl locally to build a correct function call in the configure test script).
+dnl
+dnl In the current version if you do omit the parenthesis from the macro
+dnl argument then the macro will assume that you want to check for the
+dnl class name - which is really to check for default constructor being
+dnl exported from the given library name.
+dnl
+dnl   EXAMPLE:
+dnl AX_CXX_CHECK_LIB(cgicc, [cgicc::HTTPCookie])
+dnl AX_CXX_CHECK_LIB(cgicc, [cgicc::Cgicc::getVersion () const],
+dnl AX_CXX_CHECK_LIB(boost_regex, [boost::RegEx::Position (int i = 0) const])
+dnl
+dnl Result:
+dnl Just as the usual AX_CXX_CHECK_LIB - defines HAVE_LIBCGICC
+dnl and adds the libraries to the default library path (and
+dnl uses internally the normal ac_check_lib cache symbol
+dnl like ac_cv_lib_cgicc_cgicc__Cgicc)
+dnl
+dnl Footnote: The C++ language is not good at creating stable library
+dnl interfaces at the binary level - a lot of functionality is usually being
+dnl given as inline functions plus there is hardly a chance to create opaque
+dnl types. Therefore most C++ library tests will only do compile tests using
+dnl the header files. Doing a check_lib is however good to check the link
+dnl dependency before hitting it as an error in the build later.
+dnl
+dnl @category C++
+dnl @author Guido U. Draheim
+dnl @vesion 2006-12-18
+
+AC_DEFUN([AX_CXX_CHECK_LIB],
+[m4_ifval([$3], , [AH_CHECK_LIB([$1])])dnl
+AS_LITERAL_IF([$1],
+	      [AS_VAR_PUSHDEF([ac_Lib], [ac_cv_lib_$1_$2])],
+	      [AS_VAR_PUSHDEF([ac_Lib], [ac_cv_lib_$1''_$2])])dnl
+AC_CACHE_CHECK([for $2 in -l$1], ac_Lib,
+[ac_check_lib_save_LIBS=$LIBS
+LIBS="-l$1 $5 $LIBS"
+case "$2"
+in *::*::*\(*)
+AC_LINK_IFELSE([AC_LANG_PROGRAM([
+ namespace `echo "$2" | sed -e "s/::.*//"`
+ { class `echo "$2" | sed -e "s/.*::\\(.*\\)::.*/\\1/" -e "s/(.*//"`
+   { public: int `echo "$2" | sed -e "s/.*:://" -e "/(/!s/..*/&()/"`;
+   };
+ }
+],[`echo "$2" | sed  -e "s/(.*//" -e "s/\\(.*\\)::\\(.*\\)/((\\1*)(0))->\\2/g"`()])],
+	       [AS_VAR_SET(ac_Lib, yes)],
+	       [AS_VAR_SET(ac_Lib, no)])
+;; *::*::*)
+AC_LINK_IFELSE([AC_LANG_PROGRAM([
+ namespace `echo "$2" | sed -e "s/::.*//"`
+ { namespace `echo "$2" | sed -e "s/.*::\\(.*\\)::.*/\\1/"`
+   { class `echo "$2" | sed -e "s/.*:://"`
+      { public: `echo "$2" | sed -e "s/.*:://"` ();
+      };
+   }
+ }
+],[new $2()])],
+	       [AS_VAR_SET(ac_Lib, yes)],
+	       [AS_VAR_SET(ac_Lib, no)])
+;; *::*\(*)
+AC_LINK_IFELSE([AC_LANG_PROGRAM([
+ class `echo "$2" | sed -e "s/\\(.*\\)::.*/\\1/" -e "s/(.*//"`
+   { public: int `echo "$2" | sed -e "s/.*:://" -e "/(/!s/..*/&()/"`;
+   };
+],[`echo "$2" | sed  -e "s/(.*//" -e "s/\\(.*\\)::\\(.*\\)/((\\1*)(0))->\\2/g"`()])],
+	       [AS_VAR_SET(ac_Lib, yes)],
+	       [AS_VAR_SET(ac_Lib, no)])
+;; *::*)
+AC_LINK_IFELSE([AC_LANG_PROGRAM([
+ namespace `echo "$2" | sed -e "s/::.*//"`
+ { class `echo "$2" | sed -e "s/.*:://"`
+   { public: `echo "$2" | sed -e "s/.*:://"` ();
+   };
+ }
+],[new $2()])],
+	       [AS_VAR_SET(ac_Lib, yes)],
+	       [AS_VAR_SET(ac_Lib, no)])
+;; *)
+AC_LINK_IFELSE([AC_LANG_CALL([], [$2])],
+	       [AS_VAR_SET(ac_Lib, yes)],
+	       [AS_VAR_SET(ac_Lib, no)])
+;; esac
+LIBS=$ac_check_lib_save_LIBS])
+AS_IF([test AS_VAR_GET(ac_Lib) = yes],
+      [m4_default([$3], [AC_DEFINE_UNQUOTED(AS_TR_CPP(HAVE_LIB$1))
+  LIBS="-l$1 $LIBS"
+])],
+      [$4])dnl
+AS_VAR_POPDEF([ac_Lib])dnl
+])# AC_CHECK_LIB
Index: git/makefile.inc
===================================================================
--- git.orig/makefile.inc	2012-08-08 11:11:50.461702337 +0200
+++ /dev/null	1970-01-01 00:00:00.000000000 +0000
@@ -1,3 +0,0 @@
-ROFL_DIR = ../rofl-pub
-ROFL_LIBS := $(BASEDIR)/$(ROFL_DIR)/lib/rofl/librofl.a $(BASEDIR)/$(ROFL_DIR)/lib/common/librofcommon.a 
-include $(ROFL_DIR)/makefile.inc
Index: git/makefile
===================================================================
--- git.orig/makefile	2012-08-08 11:12:31.258329637 +0200
+++ /dev/null	1970-01-01 00:00:00.000000000 +0000
@@ -1,55 +0,0 @@
-#
-#
-#
-#
-
-TARGET := adpd
-
-BASEDIR := .
-
-include $(BASEDIR)/makefile.inc
-
-INCDIR := -I$(BASEDIR)/include -I$(BASEDIR)/$(ROFL_DIR)/include
-OBJDIR := ./build
-
-INCS := $(wildcard include/*.h)
-SRCS := $(wildcard *.cc)
-OBJS := $(patsubst %.cc,$(OBJDIR)/%.o,$(SRCS))
-
-CFLAGS+=$(INCDIR)
-ROFL_LIBS += $(BASEDIR)/$(ROFL_DIR)/lib/config/librofconfig.a
-LIBS :=  $(ROFL_LIBS) -lpthread -lrt -lcrypt 
-LDFLAGS := -pg
-
-.PHONY: all $(ROFL_LIBS)
-
-all: $(OBJDIR) $(TARGET)
-
-$(TARGET): $(OBJS) $(ROFL_LIBS)
-	$(CC) $(LDFLAGS) $(OBJS) $(LIBS) -o $@
-
-.depend: $(SRCS)
-	$(CC) -MM $(INCDIR) $(INCS) $(SRCS) > .depend        
-
-$(OBJDIR)/%.o : %.cc
-	$(CC) $(CFLAGS) -c $< -o $@
-
-$(OBJDIR):
-	mkdir $(OBJDIR)
-
-$(SUBDIRS):
-	$(MAKE) -C $@
-
-
-.PHONY : clean rclean subdirs
-clean :
-	@for dir in $(SUBDIRS); do \
-                make -C $$dir $@; \
-        done;
-	rm -f $(OBJDIR)/*.o
-
-rclean : clean
-	rm -f .depend $(TARGET) $(OBJDIR)/*.o
-	rm -f *~
-			
-include .depend
